#!/usr/bin/python
import os,sys,re,time,datetime
import sqlite3
import readline # don't remove - enables editing in input() calls
import random
import pathlib

def usage():
	m = os.path.basename(sys.argv[0])
	sys.exit("""
Usage:
  %s [command]

Commands:
 (empty)       quiz mode
  all          quiz everything, due or not

  a            interactively add new entries
  f <query>    find (sub)string(s) in database
  e <query>    edit matching entry

  db           open database file in sqlitebrowser
  it           list all entries
  i            show statistics on what is due and when
  I            same as i but use days as histogram bins
  R            roll back all entries' due dates by one day

  l            show selected language pair
  l  [A] <B>   selects existing A <-> B language pair
  l! <A> <B>   creates and selects new language pair

For language pairs, A is your language, B is the foreign language (if
you reverse that, the passive recall would get quizzed before the
active recall, which is too easy). Each pair gets its own database file.

Matching is done ignoring case, spacing and punctuation at the ends.
Items like "A|B|C" match any, some or all of the options in any order.
Also, "A,-foo,-bar" is equivalent to "A|Afoo|Abar".
""" % (m,))
# debugging commands:
#  norm <str>            normalize given string
#  match <answer> <str>  match given string against answer

DATA_PATH = '~/.config/vom/'
SEL       = '\033[35m' # hilight color
NRM       = '\033[0m'  # reset to standard color

def HI(s:str): return SEL+s+NRM

a_name    = ""
b_name    = ""
# readline wants nonprinting escapes inside \001 ... \002
a_prompt  = f"\001{SEL}\002[%s]\001{NRM}\002 "
b_prompt  = a_prompt # same pattern for Q and A
a_prompt0 = f"{SEL}[%s]{NRM} "
b_prompt0 = a_prompt0 # same pattern for Q and A
QUIZ_ALL  = False # set to True on "all" command
NOW       = int(time.time())

########################################################################
# Helper functions
########################################################################

def bucket_time(b:int):
	DAYS = 60*60*24
	D = [1, 1, 2, 3, 5, 8, 14, 21, 30, 50, 80, 120, 200]
	if b is None or b < 0: b = 0
	if b >= len(D): b = len(D)-1
	return int(D[b] * DAYS)

def update_known(b:int, t:int):
	now = int(time.time())

	# if we quizzed before it was due:
	# option A: let it count, move to next bucket
	# option B: re-anchor bucket at current time
	# option C: do nothing

	dt0 = bucket_time(b-1)
	dt = bucket_time(b)
	fuzz = 0 # how much can we change the time to offset drift?

	# option A if 90% of bucket time has passed
	if now >= t or b <= 0 or now >= t - 0.1*dt0:
		t  = now + dt
		b += 1
		fuzz = dt * 0.2
	
	# option B unless that moves t backwards (should not happen)
	elif now+dt0 > t:
		t = now + dt0
		fuzz = dt0 * 0.2

	# work against quiz times drifting farther and farther back by
	# always pulling them a little bit towards 6:00 in the morning
	# (proper way to do this would be to have calendar dates in the
	# database instead of timestamps - this heuristic does fail when
	# changing time zones a lot)
	if fuzz > 0:
		x = datetime.datetime.fromtimestamp(t).time()
		n = x.second + x.minute*60 + (x.hour-6)*60*60
		# pull back during the day only
		if x.hour >= 6:
			dt = min(fuzz, n)
			t -= dt
			fuzz -= dt

	# also work against clustering into single days - like when not
	# quizzing or adding for several days and then going through a
	# large list - avoid everything clustering into single days with
	# nothing to do inbetween
	HOUR = 60*60
	DAY = 24*HOUR
	K  = int(fuzz/DAY)
	if K >= 1:
		D = [0]*(K+1)
		tt = t+4*HOUR
		for x in "ab":
			for r in db.execute(
				f"SELECT ({tt}-{x}_time)/{DAY} as i,COUNT(*) FROM data \
					WHERE {x}_time > {tt-(K+1)*DAY} AND {x}_time <= {tt} \
					GROUP BY i"): D[r[0]] += r[1]
		dd = DAY * min(enumerate(D), key=lambda x: x[1])[0]
		t    -= dd
		fuzz -= dd
		assert(t >= now)

	return (b,t)

def normal(s:str):
	S = [re.sub('\s\s+|\t', ' ',str(x).strip()) for x in str(s).split("|")]
	# foo,-x,-y ==> foo | foox | fooy
	for i in range(0, len(S)):
		s = S[i]
		T = re.split('\s*,\s*-', s)
		if len(T) > 1:
			s = T[0]
			for j in range(1, len(T)):
				s += " | "+T[0]+T[j]
			S[i] = s
	
	return " | ".join(S)

def matches(s:str, a:str) -> bool:
	S = s.split("|")
	A = a.split("|")
	for M in [S,A]:
		for i in range(0, len(M)):
			s = M[i].strip().lower()
			# unify spaces and tabs
			s = re.sub('\s\s+|\t', ' ', s)
			# remove punctuation at the ends when comparing
			s = re.sub('\s*[.!?,]+$|^[¡¿]+\s*','', s)
			M[i] = s
	S = set(S)
	A = set(A)
	S.discard("")
	A.discard("")
	if len(S) == 0: return len(A) == 0

	if S.issubset(A): return True

	for s in S:
		if s in A: continue
		# if the given answer had some (foo) suffix, that better match
		# the actual answer
		if re.match('.+\s\([^)]+\)\s*$', s) is not None: return False
		# the answer had no (foo) suffix, match it against any answer
		# with a (foo) suffix
		found = False
		for a in A:
			# if a has no suffix, it doesn't match
			if re.match('.+\s\([^)]+\)\s*$', a) is None: continue
			# remove the suffix
			a0 = re.sub('\s+\([^)]+\)\s*$','', a)
			if a0 == s:
				found = True
				break
			# try foo (bar) ==> foo bar | bar foo | (bar) foo
			a1 = re.sub('\s+\(([^)]+)\)\s*$',' \\1', a)
			a2 = re.sub('^(.+)\s+\(([^)]+)\)\s*$','\\2 \\1', a)
			a3 = re.sub('^(.+)\s+\(([^)]+)\)\s*$','(\\2) \\1', a)
			if a1==s or a2==s or a3==s:
				found = True
				break
		if not found: return False
	return True

def other_matches(s:str, a:str) -> str:
	# return every option in s, that was not in a
	S = s.split("|")
	A = a.split("|")
	for M in [S,A]:
		for i in range(0, len(M)):
			s = M[i].strip()
			# unify spaces and tabs
			s = re.sub('\s\s+|\t', ' ', s)
			M[i] = s
	A0 = A.copy()
	for M in [S,A]:
		for i in range(0, len(M)):
			s = M[i].lower()
			# remove punctuation at the ends when comparing
			s = re.sub('\s*[.!?,]+$|^[¡¿]+\s*','', s)
			M[i] = s
	S = set(S)
	S.discard("")

	R = []

	for i in range(0, len(A)):
		a = A[i]
		if a == "" or a in S: continue
		if re.match('.+\s\([^)]+\)\s*$', a) is not None:
			a0 = re.sub('\s+\([^)]+\)\s*$','', a)
			if a0 in S: continue
			# try foo (bar) ==> foo bar | bar foo | (bar) foo
			a1 = re.sub('\s+\(([^)]+)\)\s*$',' \\1', a)
			a2 = re.sub('^(.+)\s+\(([^)]+)\)\s*$','\\2 \\1', a)
			a3 = re.sub('^(.+)\s+\(([^)]+)\)\s*$','(\\2) \\1', a)
			if a1 in S or a2 in S or a3 in S:
				continue
		R.append(A0[i])
	return R

def edit(prompt:str, default:str=""):
	readline.set_startup_hook(lambda: readline.insert_text(default))
	try:
		return input(prompt)
	finally:
		readline.set_startup_hook(None)

def dt_fmt(dt:int):
	if dt <= 0: return "NEW   "
	global NOW
	dt -= NOW
	if dt < 0:
		s = "since %4.1f %s"
		dt = -dt
	else:
		s = "in    %4.1f %s"
	if dt < 60: return s % (dt,"s")
	dt /= 60
	if dt < 60: return s % (dt,"m")
	dt /= 60
	if dt < 60: return s % (dt,"h")
	dt /= 24
	if dt < 14: return s % (dt,"D")
	if dt < 30*7: return s % (dt/7,"W")
	dt /= 365
	return s % (dt,"Y")

def select(a:str, b:str, create:bool):
	global DATA_PATH
	p = os.path.expanduser(DATA_PATH)

	if a is None and not create:
		pp = list(pathlib.Path(p).glob(f"*-{b}.sqlite"))
		if len(pp) < 1: sys.exit(f"language {b} not found!")
		if len(pp) > 1: sys.exit(f"language {b} not unique ({len(pp)} items found!)")
		a = str(pp[0])[:-(8+len(b))]

	os.makedirs(p, 0o700, True)
	fn = f"{a}-{b}.sqlite"
	f = os.path.join(p, fn)
	link = os.path.join(p, "current")
	fresh = not os.path.isfile(f)
	if fresh and not create: sys.exit("Language pair not found!")
	db = sqlite3.connect(f)
	if fresh:
		print("Creating sqlite database...")
		c = db.cursor()
		c.execute("""CREATE TABLE data (
			id INTEGER NOT NULL PRIMARY KEY,
			a STRING NOT NULL,
			b STRING NOT NULL,
			a_bucket INTEGER NOT NULL DEFAULT 0,
			b_bucket INTEGER NOT NULL DEFAULT 0,
			a_time INTEGER NOT NULL DEFAULT 0,
			b_time INTEGER NOT NULL DEFAULT 0)""")
		c.execute("CREATE INDEX ta_index ON data (a_time ASC)")
		c.execute("CREATE INDEX tb_index ON data (b_time ASC)")
		db.commit()
		print("Done.")

	if os.path.islink(link): os.remove(link)
	os.symlink(fn, link)

def connect():
	global db, DATA_PATH
	p = os.path.expanduser(DATA_PATH)
	link = os.path.join(p, "current")
	if not os.path.lexists(link): sys.exit("No language pair set! Call with l or l! option!")
	f = os.path.realpath(link)
	fn = os.path.basename(f)
	db = sqlite3.connect(f)
	db.row_factory = sqlite3.Row
	
	global a_name, b_name, a_prompt, b_prompt, a_prompt0, b_prompt0
	m = re.match('^([^-]+)-([^-]+)\.sqlite$', fn)
	if m is None: sys.exit(f"Link is set to garbage: {link} --> {fn}")
	a_name     = m[1]
	b_name     = m[2]
	a_prompt  %= m[1]
	b_prompt  %= m[2]
	a_prompt0 %= m[1]
	b_prompt0 %= m[2]

def find(S):
	A = ()
	Q = "SELECT * FROM data"
	for s in S:
		Q += " WHERE" if len(A) == 0 else " AND"
		w = f'%{s}%'
		A += (w,w)
		Q += " (LOWER(a) LIKE LOWER(?) OR LOWER(b) LIKE LOWER(?))"
	return db.execute(Q, A)

########################################################################
# Commandline parsing
########################################################################

if len(sys.argv) == 2 and sys.argv[1] == "it":
	connect()
	for row in db.execute("SELECT * FROM data"):
		print("%s (%d): %s --> %s" % (
			dt_fmt(row['a_time']),
			row['a_bucket'],
			row['a'], row['b']))
		print("%s (%d): %s --> %s" % (
			dt_fmt(row['b_time']),
			row['b_bucket'],
			row['b'], row['a']))
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1].lower() == "i":
	connect()
	W,H = os.get_terminal_size()
	
	Q = "SELECT COUNT(*) FROM data "
	row = db.execute(Q).fetchone()
	total = 0 if row is None else row[0]

	# Table with some statistics:
	#------------------------------------------------------------------
	print()
	s0 = "┌"
	s1 = "│"
	sm = "├"
	s2 = "│"
	s3 = "└"
	for h in [0, 1, 2, 4, 6, 8, 10, 12, 24, 48, 72, 7*24, 30*24, 365*24]:
		t1 = NOW+h*60*60
		row = db.execute(Q + "WHERE a_time < ?", (t1,)).fetchone()
		n = 0 if row is None else row[0]
		row = db.execute(Q + "WHERE b_time < ?", (t1,)).fetchone()
		n += 0 if row is None else row[0]
		ss1 = str(n)
		ss2 = "NOW" if h==0 else "%dh"%h if h <= 48 else "%dD"%(h//24)
		k = 2+max(len(ss1), len(ss2))
		if len(s0)+k+1 > W: break
		ss1 = ss1.rjust(k-1)
		ss2 = ss2.rjust(k-1)
		if h == 0 or h == 24:
			ss1 = SEL+ss1+NRM
			ss2 = SEL+ss2+NRM
		s0 += "─" * k + "┬"
		s1 += ss1    + " │"
		sm += "─" * k + "┼"
		s2 += ss2    + " │"
		s3 += "─" * k + "┴"
	s0 = s0[:-1] + "┐"
	sm = sm[:-1] + "┤"
	s3 = s3[:-1] + "┘"
	pre = " " * ((W-len(s0))//2)
	print(pre+s0)
	print(pre+s2)
	print(pre+sm)
	print(pre+s1)
	print(pre+s3)
	print()

	# Histogram:
	#------------------------------------------------------------------
	k = (2 if sys.argv[1]=='i' else 24) # bin size in hours
	D = {} # histogram data
	h = 15 # content height in screen lines
	for x in "ab":
		for row in db.execute(f"""SELECT 
			FLOOR((MAX({x}_time-?,0))/(3600*{k})) as i,
			COUNT(id) as n
			FROM DATA GROUP BY 1 ORDER BY 1""", (NOW,)):
			i,n = row['i'],row['n']
			if i > W-2: continue
			if not i in D:
				D[i] = n
			else:
				D[i] += n
	if len(D)==0: sys.exit(0)
	N = max(D.values())
	y0 = int(100/N*h)
	for i in D: D[i] = D[i]/N*h
	s = " " + "▁" * (W-2)
	print(s + " ")
	for y in range(h,-1,-1):
		s = ""
		for x in range(0, W-2):
			s += '▒' if D.get(x,0) > y else '░'
		print("▕" + s + "▎")
	
	K,u,dk = 24,'h',1 # hours between labels, unit, unit size in hours
	if K//k < 8: K = 2*24
	if K//k < 8: K = 7*24
	if K//k < 8: K = 14*24
	if K//k < 8: K = 30*24
	if K > 24: u,dk = 'd',24
	nk = K//k # bins between labels
	s = " "
	for x in range(0, W-2):
		s += "▀" if x % nk == 0 else "▔"
	print(s+" ")
	s = "NOW"
	t = K
	while True:
		tt = str(t//dk)+u
		if t//k + len(tt) > W: break
		s += " "*(t//k - len(s)) + tt
		t += K
	print(s)
	print()
	print(("%s-%s, max = %d, total pairs = %d" % (a_name, b_name, N, total)).center(W))
	sys.exit(0)

elif len(sys.argv) == 3 and sys.argv[1] == "norm":
	connect()
	s = sys.argv[2]
	print(f"[%s] {SEL}-->{NRM} [%s]" % (s, normal(s)))
	sys.exit(0)

elif len(sys.argv) == 4 and sys.argv[1] == "match":
	connect()
	a = normal(sys.argv[2])
	s = normal(sys.argv[3])
	print(f"[%s] {SEL}-->{NRM} [%s]" % (s, a))
	print("YES" if matches(s,a) else "NO")
	sys.exit(0)

elif len(sys.argv) >= 3 and sys.argv[1] == "f":
	connect()
	found_any = False
	for row in find(sys.argv[2:]):
		found_any = True
		print(f"%s {SEL}-->{NRM} %s" % (row['a'], row['b']))
	if not found_any: print("Not found.")
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1] == "db":
	p = os.path.expanduser(os.path.join(DATA_PATH, "current"))
	os.execlp("sqlitebrowser", "sqlitebrowser", p)
	print("Exec failed!")
	sys.exit(-1)

elif len(sys.argv) >= 3 and sys.argv[1] == "e":
	connect()
	items = []
	for row in find(sys.argv[2:]):
		items.append((row['id'], str(row['a']), str(row['b'])))
	if len(items) == 0:
		print("Nothing found.")
		sys.exit(0)
	elif len(items) == 1:
		i,a,b = items[0]
		print("Found: %s --> %s" % (a,b))
		n = 0
	else:
		for i in range(0,len(items)):
			j,a,b = items[i]
			print(f"{SEL}%2d:{NRM} %s {SEL}-->{NRM} %s" % (i+1,a,b))
		while True:
			try:
				n = input("? ")
			except KeyboardInterrupt:
				print("")
				sys.exit(0)
			except EOFError:
				print("")
				sys.exit(0)
			try:
				n = int(n) - 1
			except ValueError:
				print("that's not an integer")
				continue
			if n < 0 or n >= len(items):
				print("out of range")
				continue
			break
	i,a0,b0 = items[n]
	try:
		a = normal(edit(a_prompt, a0))
		b = normal(edit(b_prompt, b0))
	except KeyboardInterrupt:
		print("")
		sys.exit(0)
	except EOFError:
		print("")
		sys.exit(0)
	if a == a0 and b == b0:
		print("No change.")
	elif a == "" and b == "":
		db.execute("DELETE FROM data WHERE id=?", (i,))
		db.commit()
		print("Entry deleted.")
	elif a == "" or b == "":
		print("Error: Strings can't be empty.")
		sys.exit(1)
	else:
		for row in db.execute("SELECT * FROM data WHERE LOWER(a)=LOWER(?) OR LOWER(b)=LOWER(?)", (a,b)):
			if row['id'] != i:
				print("Collision with: %s --> %s"\
					%(row['a'], row['b']))
				sys.exit(2)
		db.execute("UPDATE data SET a=?,b=? WHERE id=?", (a,b,i))
		db.commit()
		print("Entry updated.")
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1] == "R":
	connect()
	db.execute("UPDATE data SET a_time=a_time+60*60*24,b_time=b_time+60*60*24 WHERE a_time>0")
	db.commit()
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1] == "l":
	connect()
	print("%s--> %s" % (a_prompt, b_prompt))
	sys.exit(0)

elif len(sys.argv) == 4 and sys.argv[1] in {"l", "l!"}:
	adding = (sys.argv[1] == "l!")
	Q,A = sys.argv[2:]
	select(Q,A,adding)
	sys.exit(0)

elif len(sys.argv) == 3 and sys.argv[1] == "l":
	select(None, sys.argv[2], False)
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1] == "a":
	connect()
	try:
		while True:
			A = normal(input(a_prompt))
			if A == "":
				print("Can not be empty\n")
				continue
			dup = False
			for row in db.execute("SELECT * FROM data WHERE LOWER(a)=LOWER(?)", (A,)):
				print("Already exists! Answer:", row['b'])
				dup = True
			if dup:
				print("")
				continue

			B = normal(input(b_prompt))
			if B == "":
				print("Can not be empty\n")
				continue
			for row in db.execute("SELECT * FROM data WHERE LOWER(b)=LOWER(?)", (B,)):
				print("Already exists! Question:", row['a'])
				dup = True
			if dup:
				print("")
				continue

			print(f"{SEL}Adding{NRM} {A} {SEL}-->{NRM} {B}\n")
			db.execute("INSERT INTO data (a,b) VALUES (?,?)", (A,B))
			db.commit()
	except EOFError:
		print("")
	except KeyboardInterrupt:
		print("")
	sys.exit(0)

elif len(sys.argv) == 2 and sys.argv[1] == "all":
	QUIZ_ALL = True
	# and fall through into quiz mode...
	
elif len(sys.argv) > 1:
	usage()

########################################################################
# Quiz mode
########################################################################

found_any = False

def quiz(direction:int):
	global found_any, NOW, db, QUIZ_ALL
	global a_prompt0, b_prompt0
	a = 'a' if direction > 0 else 'b'
	b = 'b' if direction > 0 else 'a'
	ap = a_prompt0 if direction > 0 else b_prompt0
	bp = b_prompt0 if direction > 0 else a_prompt0

	def total():
		global NOW, db
		Q = f"SELECT COUNT(*) FROM data WHERE {a}_time < ?"
		row = db.execute(Q, (NOW,)).fetchone()
		return 0 if row is None else row[0]

	N0 = total() if not QUIZ_ALL else -1
	if N0 > 0: print(f"{SEL}Found {N0} items.{NRM}\n")

	# this puts useable key names into the rows when joining:
	db.execute("pragma full_column_names=ON;")
	#db.execute("pragma short_column_names=OFF;")

	#Q = f"SELECT * FROM data WHERE {a}_time < ? ORDER BY RANDOM() LIMIT 1"
	#QA = "SELECT * FROM data ORDER BY RANDOM() LIMIT 1"
	Q = f"SELECT * FROM data WHERE id IN (SELECT id FROM data WHERE {a}_time < ? ORDER BY RANDOM() LIMIT 1)"
	QA = "SELECT * FROM data WHERE id IN (SELECT id FROM data ORDER BY RANDOM() LIMIT 1)"
	U = f"UPDATE data SET {a}_bucket = ?, {a}_time = ? WHERE id = ?"

	while True:
		row = (db.execute(Q, (NOW,)) if not QUIZ_ALL else db.execute(QA)).fetchone()
		if row is None: break
		found_any = True

		# print question
		S = [s.strip() for s in str(row[a]).split("|")]
		print(ap + HI(" | ").join(S))

		# get answer
		B0 = ""
		while True:
			B = normal(edit(bp, B0))

			# type hash for status
			if B == "#":
				if QUIZ_ALL:
					print("Unlimited mode, hit ^D to end")
				else:
					M = total() # = remaining items
					p = round(100*(N0-M)/(N0-1)) if N0 > 1 else 100
					print("At %d%%. This is %d / %d." % (p, 1+N0-M, N0))
			# ignore empty input (hitting enter twice by accident)
			elif B == "" and B0 == "":
				continue
			
			# break on right answer
			elif matches(B, str(row[b])):
				solved = True
				R = other_matches(B, str(row[b]))
				break

			# repeat wrong answer (or clear input) to give up
			elif B == B0 or B in {'','-','.','?'}:
				print("")
				input("NO --> %s" % normal(row[b]))
				solved = False
				break

			# wrong answer - allow correction
			else:
				B0 = B

		# move to proper bucket+time
		if solved:
			rb,rt = update_known(row["%s_bucket" % a], row["%s_time" % a])
			if R is not None and len(R) > 0:
				print("YES" + HI(" + ") + HI(" | ").join(R))
		else:
			rb = 0
			rt = NOW + 1
		db.execute(U, (rb, rt, row['id']))
		db.commit()

		# print blank line before next question
		print("")

connect()

try:
	try:
		quiz(+1)
	except EOFError:
		print("\n")
		# and keep going in the other direction...

	quiz(-1)

	if not found_any:
		print("Nothing due to be quizzed.")
except EOFError:
	print("")
except KeyboardInterrupt:
	print("")

