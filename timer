#!/usr/bin/env python
import sys, signal, time, subprocess
from threading import Event

def format_seconds(sec):
	s = " ." * min(10, sec//60) + (" " if sec >= 60 else "")
	l0 = len(s)
	for n in (31557600, 86400, 3600):
		k = sec // n
		if k == 0 and len(s) == l0: continue
		s += "%02d:" % k
		sec %= n
	return s + "%02d:%02d" % (sec // 60, sec % 60)

### parse command line ######################################
n = len(sys.argv)-1
if n < 1 or n > 3: sys.exit("usage: timer [h] <m> [s]")
sec = 0.0
for i in range(1,n+1):
	sec *= 60.0
	try:
		sec += float(sys.argv[i])
	except:
		sys.exit(f'could not parse "{sys.argv[i]}"')
if n == 1: sec *= 60.0
if sec < 0: sec = 0

### install interrupt handlers ##############################
quit = Event()
signal.signal(signal.SIGTERM, lambda sig,stk: quit.set());
signal.signal(signal.SIGHUP,  lambda sig,stk: quit.set());
signal.signal(signal.SIGINT,  lambda sig,stk: quit.set());

### countdown ###############################################
t1 = time.monotonic_ns() + sec*1e9
l0 = 0
while not quit.is_set():
	t = time.monotonic_ns()
	if t >= t1: break
	sec = int(round((t1-t)/1e9))
	s = format_seconds(sec)
	l = len(s)
	(c0,c1) = ('\033[35m','\033[0m') if sec <= 5 else ("","")
	print(f"\r{c0}{s}{c1}", sep="", end=" "*max(0,l0-l), flush=True)
	l0 = l
	quit.wait((t1-t)/1e9 - (sec-1))

if not quit.is_set():
	print("\r", " "*l0, "\r", sep="", end="", flush=True)
else:
	print()
	sys.exit(1)

### beep when done ##########################################
subprocess.run(["mplayer", "-really-quiet", "-nocache",
	"-ao","alsa:noblock", "-noar",
	"/home/t/~/Musik/Sounds/Sound Effects/beep-7.wav"],
	stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

